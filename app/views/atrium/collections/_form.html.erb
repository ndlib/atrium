<%= form_for(@collection, :html => {:class => "atrium"}) do |f| %>
  <% if @collection.errors.any? %>
    <ul class="errors">
      <% @collection.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  <% end %>

  <fieldset>
    <legend>Collection Attributes</legend>
    <ol>
      <li>
        <%= f.label :title, 'Title Text:' %>
        <%= f.text_field :title %>
      </li>
      <li>
        <%= f.label :url_slug, 'URL slug:' %>
        <%= f.text_field :url_slug %>
        <small>
          Enter the way you'd like this collection to be identified in the URL.<br />
          It defaults to the numeric id of the collection.
        </small>
      </li>
      <li>
        <%= f.label :title_markup, 'HTML Title (optional):' %>
        <%= f.text_area :title_markup, :class => 'markdown'  %>
        <small>
          You can create an HTML title for use throughout this collection.<br />
          For more dramatic view customization create a theme instead.
        </small>
      </li>
    </ol>
  </fieldset>

  <fieldset>
    <legend>Collection Scope</legend>
    <p>
      A collection is a subset of the total holdings.<br />
      Save a search on the catalog page to use as the collection scope.
    </p>
    <p>
      <% if f.object.filter_query_params.present? %>
        Current Scope: <%= Atrium.query_param_beautifier(self,f.object.filter_query_params) %>
        <%= f.check_box :remove_filter_query_params %>
        <small>Use the checkbox to delete scope</small>
      <% end %>
    </p>
    <ol>
      <li>
        <%= f.label :include_search_id, 'Set Collection Scope:' %>
        <%= f.select(:include_search_id, saved_searches_for_select, { :include_blank => true }) %>
        <small>Choose from one of your saved searches.</small>
      </li>
    </ol>
  </fieldset>

  <fieldset>
    <legend>Collection Options</legend>
    <ol>
      <li>
        <%= f.label :theme, 'Theme:' %>
        <%= f.select :theme, @collection.class.available_themes %>
        <small>Themes are created outside of the administrative interface.</small>
      </li>
      <li>
        <%= f.label :search_facet_names, 'Collection Search Facets:' %>
        <%= f.collection_select(
          :search_facet_names,
          Atrium.config.facet_fields.map {|key, facet| Atrium::Search::FacetSelection.new(:field_name => facet.field)},
          :field_name,
          :label,
          {},
          :multiple => true,
          :class => 'chosen',
          :'data-placeholder' => 'Select desired facets from the Collection'
        )%>
      </li>
    </ol>
  </fieldset>

  <fieldset class="last">
    <legend>Collection Description</legend>
    <ol>
      <li>
        <%= f.label :collection_description, 'Collection Home Page About Text:' %>
        <%= f.text_area :collection_description, :rows=> '20', :cols => '120', :class => 'markdown' %>
      </li>
    </ol>
      </li>
    </ol>
  </fieldset>
  <p>
  <% if @collection.new_record? %>
    <%= f.submit 'Create Collection', :class => 'button' %>
  <% else %>
    <%= f.submit 'Update Collection', :class => 'button' %>
  <% end %>
  </p>
<% end %>
<% unless @collection.new_record?  %>

  <hr />

  <h3>Exhibits</h3>
  <p>
    An exhibit is a customizable view of a single topic (as defined by a facet),
    further scoped by an optional Solr query. An exhibit defines it's own
    hierarchical list of facets. It may also have a description and a list of
    featured items.
  </p>
  <% if @collection.exhibits.any? %>
    <ol data-resource="<%=update_collection_exhibit_order_path %>" class="exhibit-listing sortable">
      <% @collection.exhibits.each do |exhibit| %>
        <li data-id="<%= exhibit[:id] %>" data-order="<%= exhibit.set_number %>" class="ui-state-default">
          <span class="ui-icon ui-icon-arrowthick-2-n-s"></span>
          <%= exhibit.pretty_title %>
          <span class="controls">
            <%= link_to 'Configure', edit_collection_exhibit_path(exhibit.collection, exhibit) %>
            <%= link_to(
              'Delete',
              collection_exhibit_path(exhibit.collection, exhibit),
              :method => :delete,
              :class => :destroy,
              :confirm => 'Do you really want to delete this exhibit?'
            )%>
        </span>
        </li>
      <% end %>
    </ol>
  <% else %>
    <p><em>There are no exhibits in this collection.</em></p>
  <% end %>
  <%= link_to 'Add a Exhibit to this Collection', new_collection_exhibit_path(@collection), :class => 'button' %>
  <hr />

  <h3>Showcases</h3>
  <p>
    A showcase is a container for storing featured items and descriptions. A
    showcase can be attached to a collection, exhibit, or to specific
    combinations of selected facets and facet values within an exhibit. There
    can be multiple showcases in a collection.
  </p>
  <% if @collection.showcases.any? %>
    <ol data-resource="<%=update_collection_showcase_order_path   %>" class="exhibit-listing sortable">
      <% @collection.showcases.each do |showcase| %>
        <li data-id="<%= showcase.id%>" data-order="<%= showcase.sequence %>" class="ui-state-default">
          <span class="ui-icon ui-icon-arrowthick-2-n-s"></span>
          <%= showcase.pretty_title %>
          <span class="controls">
            <%= link_to 'Configure', get_showcase_parent_edit_path(showcase) %>
            <%= link_to "Delete", get_showcase_parent_show_path(showcase), :method=>:delete, :class=>:destroy, :confirm=>"Do you really want to delete this showcase?"%>
          </span>
        </li>
      <% end %>
    </ol>
  <% else %>
    <p><em>There are no showcases in this collection.</em></p>
  <% end %>
  <%= link_to 'Add a Showcase to this Collection', new_collection_showcase_path(@collection), :class => 'button' %>

  <hr />
  <%= button_to(
                'Delete this Collection',
                collection_path(@collection),
                :method => :delete,
                :form_class => 'collection-destroy-controls hazardous-action',
                :confirm => 'Do you really want to delete this collection?',
                :class => 'button'
        )%>

  <% content_for :atrium_side_bar do %>
    <%= render :partial => 'shared/navigation' %>
  <% end %>
<% end %>
